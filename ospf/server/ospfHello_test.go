/*
OspfHello_test.go
hello packet testing routines.
*/

package server

import (
	"fmt"
	"testing"
)

func printHelloData(pkt OSPFHelloData) {
	fmt.Println("Netmask ", pkt.netmask)
	fmt.Println("HelloInterval ", pkt.helloInterval)
	fmt.Println("options ", pkt.options)
	fmt.Println("rtrPrio ", pkt.rtrPrio)
	fmt.Println("rtrDeadInt ", pkt.rtrDeadInterval)
	fmt.Println("designatedRtr ", pkt.designatedRtr)
	fmt.Println("backupDesignatedRtr ", pkt.backupDesignatedRtr)
}

func TestOspfHelloDecode(t *testing.T) {
	data := []byte{0x01, 0x00, 0x5e, 0x00, 0x00, 0x05, 0xca, 0x11, 0x09, 0xb3, 0x00, 0x1c, 0x08, 0x00, 0x45, 0xc0,
		0x00, 0x50, 0x8d, 0xed, 0x00, 0x00, 0x01, 0x59, 0x3f, 0x5a, 0x0a, 0x4b, 0x00, 0xfe, 0xe0, 0x00, 0x00, 0x05, 0x02, 0x01, 0x00, 0x30, 0x4b, 0x01, 0x03, 0x01, 0x00, 0x00, 0x00, 0x00, 0x3e, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0x00, 0x00, 0x0a, 0x12, 0x01, 0x00, 0x00, 0x00, 0x28, 0x0a, 0x4b, 0x00, 0xfe, 0x0a, 0x4b, 0x00, 0x01, 0x4b, 0x01, 0x00, 0x01, 0xff, 0xf6, 0x00, 0x03, 0x00, 0x01, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01}

	fmt.Println("1. Valid packet")
	ospfHelloData := NewOSPFHelloData()
	decodeOspfHelloData(data, ospfHelloData)

	fmt.Println("Decoded Ospf Data : ")
	printHelloData(*ospfHelloData)

	fmt.Println("2. Corrupt data ")
	data = []byte{0x01, 0x00, 0x5e, 0x00, 0x00, 0x05, 0xca, 0x11, 0x09, 0xb3, 0x00, 0x1c, 0x08, 0x00, 0x45, 0xc0,
		0x00, 0x50, 0x8d, 0xed, 0x00, 0x00, 0x01, 0x59, 0x3f, 0x5a, 0x0a, 0x4b, 0x00, 0xfe, 0xe0, 0x00, 0x00, 0x05, 0x02, 0x01, 0x00, 0x30, 0x4b, 0x01, 0x03, 0x01, 0x00, 0x00, 0x00, 0x00, 0x3e, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0x00, 0x00, 0x0a, 0x12, 0x01, 0x00, 0x00, 0x00, 0x28, 0x0a, 0x4b, 0x00, 0xfe, 0x0a, 0x4b, 0x00, 0x01, 0x4b, 0x02, 0x00, 0x01, 0xff, 0xf6, 0x00, 0x03, 0x00, 0x01, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x02, 0x02, 0x02}
	decodeData := NewOSPFHelloData()
	decodeOspfHelloData(data, decodeData)
	fmt.Println("Decoded ospf data :")
	printHelloData(*ospfHelloData)

}
